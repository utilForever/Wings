// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GOOCANVASMM_BOUNDS_H
#define _GOOCANVASMM_BOUNDS_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* Copyright (C) 1998-2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/value.h>
#include <goocanvasitem.h>


namespace Goocanvas
{

class Bounds
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef Bounds CppObjectType;
  typedef GooCanvasBounds BaseObjectType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type() G_GNUC_CONST;

  Bounds();

  explicit Bounds(const GooCanvasBounds* gobject); // always takes a copy

  ///Provides access to the underlying C instance.
  GooCanvasBounds*       gobj()       { return &gobject_; }

  ///Provides access to the underlying C instance.
  const GooCanvasBounds* gobj() const { return &gobject_; }

protected:
  GooCanvasBounds gobject_;

private:
  

public:
  Bounds(double x1, double y1, double x2, double y2);

   double get_x1() const;
    void set_x1(const double& value);
 
   double get_x2() const;
    void set_x2(const double& value);
 
   double get_y1() const;
    void set_y1(const double& value);
 
   double get_y2() const;
    void set_y2(const double& value);
 

};

}


namespace Glib
{

/** @relates Goocanvas::Bounds
 * @param object The C instance
 * @result A C++ instance that wraps this C instance.
 */
Goocanvas::Bounds& wrap(GooCanvasBounds* object);

/** @relates Goocanvas::Bounds
 * @param object The C instance
 * @result A C++ instance that wraps this C instance.
 */
const Goocanvas::Bounds& wrap(const GooCanvasBounds* object);

#ifndef DOXYGEN_SHOULD_SKIP_THIS
template <>
class Value<Goocanvas::Bounds> : public Glib::Value_Boxed<Goocanvas::Bounds>
{};
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

} // namespace Glib


#endif /* _GOOCANVASMM_BOUNDS_H */

