// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GOOCANVASMM_ITEMSIMPLE_H
#define _GOOCANVASMM_ITEMSIMPLE_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* Copyright (C) 1998-2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>
#include <gdkmm/pixbuf.h>
#include <cairomm/cairomm.h>

#include <goocanvasmm/item.h>
#include <goocanvasmm/linedash.h>
#include <goocanvasmm/style.h>
#include <pangomm/fontdescription.h>
#include <gdkmm/rgba.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GooCanvasItemSimple GooCanvasItemSimple;
typedef struct _GooCanvasItemSimpleClass GooCanvasItemSimpleClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Goocanvas
{ class ItemSimple_Class; } // namespace Goocanvas
namespace Goocanvas
{


class ItemSimple :
  public Glib::Object,
  public Goocanvas::Item
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef ItemSimple CppObjectType;
  typedef ItemSimple_Class CppClassType;
  typedef GooCanvasItemSimple BaseObjectType;
  typedef GooCanvasItemSimpleClass BaseClassType;

private:  friend class ItemSimple_Class;
  static CppClassType itemsimple_class_;

private:
  // noncopyable
  ItemSimple(const ItemSimple&);
  ItemSimple& operator=(const ItemSimple&);

protected:
  explicit ItemSimple(const Glib::ConstructParams& construct_params);
  explicit ItemSimple(GooCanvasItemSimple* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~ItemSimple();

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GooCanvasItemSimple*       gobj()       { return reinterpret_cast<GooCanvasItemSimple*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GooCanvasItemSimple* gobj() const { return reinterpret_cast<GooCanvasItemSimple*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GooCanvasItemSimple* gobj_copy();

private:

  
protected:
  ItemSimple();

public:
  
  /** This function should be called by subclasses of Goo::CanvasItemSimple
   * in their set_model() method.
   * @param model The model that @a item will view.
   */
  void set_model(const Glib::RefPtr<ItemModel>& model);

  
  /** This function is intended to be used by subclasses of Goo::CanvasItemSimple,
   * typically in their update() or get_requested_area() methods.
   * 
   * It calculates the bounds of the current path, using the item's style
   * settings, and stores the results in the given Goo::CanvasBounds struct.
   * 
   * The returned bounds contains the bounding box of the path in device space,
   * converted to user space coordinates. To calculate the bounds completely in
   * user space, use cairo_identity_matrix() to temporarily reset the current
   * transformation matrix to the identity matrix.
   * @param cr A cairo context.
   * @param bounds The Goo::CanvasBounds struct to store the resulting bounding box.
   */
  void get_path_bounds(const Cairo::RefPtr<Cairo::Context>& context, Bounds& bounds) const;
  
  /** This function is intended to be used by subclasses of Goo::CanvasItemSimple,
   * typically in their update() or get_requested_area() methods.
   * 
   * It converts the item's bounds to a bounding box in device space.
   * @param cr A cairo context.
   * @param bounds The bounds of the item, in the item's coordinate space.
   */
  void user_bounds_to_device(const Cairo::RefPtr<Cairo::Context>& context, Bounds& bounds);
  
  /** This function is intended to be used by subclasses of Goo::CanvasItemSimple,
   * typically in their get_requested_area() method.
   * 
   * It converts the item's bounds to a bounding box in its parent's coordinate
   * space. If the item has no transformation matrix set then no conversion is
   * needed.
   * @param cr A cairo context.
   * @param bounds The bounds of the item, in the item's coordinate space.
   */
  void user_bounds_to_parent(const Cairo::RefPtr<Cairo::Context>& context, Bounds& bounds);
  
  /** This function is intended to be used by subclasses of Goo::CanvasItemSimple.
   * 
   * It checks if the given point is in the current path, using the item's
   * style settings.
   * @param x The x coordinate of the point.
   * @param y The y coordinate of the point.
   * @param cr A cairo context.
   * @param pointer_events Specifies which parts of the path to check.
   * @return <tt>true</tt> if the given point is in the current path.
   */
  bool check_in_path(double x, double y, const Cairo::RefPtr<Cairo::Context>& cr, PointerEvents pointer_events) const;
  
  /** This function is intended to be used by subclasses of Goo::CanvasItemSimple.
   * 
   * It paints the current path, using the item's style settings.
   * @param cr A cairo context.
   */
  void paint_path(const Cairo::RefPtr<Cairo::Context>& cr);
  
  /** This function is intended to be used by subclasses of Goo::CanvasItemSimple.
   * 
   * It is used as a callback for the "changed" signal of the item models.
   * It requests an update or redraw of the item as appropriate.
   * @param recompute_bounds If the item's bounds need to be recomputed.
   */
  void changed(bool recompute_bounds);
  
  /** This function is intended to be used by subclasses of Goo::CanvasItemSimple,
   * typically in their update() or get_requested_area() methods.
   * 
   * It ensures that the item's style is setup correctly. If the item has its
   * own Goo::CanvasStyle it makes sure the parent is set correctly. If it
   * doesn't have its own style it uses the parent item's style.
   */
  void check_style();
  
  /** Gets the item's line width.
   * @return The item's line width.
   */
  double get_line_width() const;

  //gtkmmproc error: title : property defs lookup failed.
  //gtkmmproc error: visibility-threshold : property defs lookup failed.
  //gtkmmproc error: visibility : property defs lookup failed.
  //gtkmmproc error: description : property defs lookup failed.
  //gtkmmproc error: pointer-events : property defs lookup failed.
  //gtkmmproc error: transform : property defs lookup failed.

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The pattern to use to paint the perimeter of the item, or NULL disable painting.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Cairo::RefPtr<Cairo::Pattern> > property_stroke_pattern() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The pattern to use to paint the perimeter of the item, or NULL disable painting.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Cairo::RefPtr<Cairo::Pattern> > property_stroke_pattern() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The pattern to use to paint the interior of the item, or NULL to disable painting.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Cairo::RefPtr<Cairo::Pattern> > property_fill_pattern() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The pattern to use to paint the interior of the item, or NULL to disable painting.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Cairo::RefPtr<Cairo::Pattern> > property_fill_pattern() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The fill rule used to determine which parts of the item are filled.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Cairo::FillRule > property_fill_rule() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The fill rule used to determine which parts of the item are filled.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Cairo::FillRule > property_fill_rule() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The compositing operator to use.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Cairo::Operator > property_operator() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The compositing operator to use.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Cairo::Operator > property_operator() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The antialiasing mode to use.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Cairo::Antialias > property_antialias() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The antialiasing mode to use.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Cairo::Antialias > property_antialias() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The base font to use for the text.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::ustring > property_font() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The base font to use for the text.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_font() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The attributes specifying which font to use.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Pango::FontDescription > property_font_desc() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The attributes specifying which font to use.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Pango::FontDescription > property_font_desc() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The hinting to be used for font metrics.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Cairo::HintMetrics > property_hint_metrics() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The hinting to be used for font metrics.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Cairo::HintMetrics > property_hint_metrics() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The line width to use for the item's perimeter.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< double > property_line_width() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The line width to use for the item's perimeter.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< double > property_line_width() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The line cap style to use.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Cairo::LineCap > property_line_cap() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The line cap style to use.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Cairo::LineCap > property_line_cap() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The line join style to use.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Cairo::LineJoin > property_line_join() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The line join style to use.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Cairo::LineJoin > property_line_join() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The smallest angle to use with miter joins, in degrees. Bevel joins will be used below this limit.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< double > property_line_join_miter_limit() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The smallest angle to use with miter joins, in degrees. Bevel joins will be used below this limit.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< double > property_line_join_miter_limit() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The dash pattern to use.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< LineDash > property_line_dash() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The dash pattern to use.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< LineDash > property_line_dash() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The color to use for the item's perimeter. To disable painting set the 'stroke-pattern' property to NULL.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_WriteOnly that allows you to set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_WriteOnly< Glib::ustring > property_stroke_color() ;
#endif //#GLIBMM_PROPERTIES_ENABLED


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The color to use for the item's perimeter, specified as a 32-bit integer value. To disable painting set the 'stroke-pattern' property to NULL.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_stroke_color_rgba() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The color to use for the item's perimeter, specified as a 32-bit integer value. To disable painting set the 'stroke-pattern' property to NULL.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_stroke_color_rgba() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The color to use for the item's perimeter, specified as a GdkRGBA. To disable painting set the 'stroke-pattern' property to NULL.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Gdk::RGBA > property_stroke_color_gdk_rgba() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The color to use for the item's perimeter, specified as a GdkRGBA. To disable painting set the 'stroke-pattern' property to NULL.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Gdk::RGBA > property_stroke_color_gdk_rgba() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The pixbuf to use to draw the item's perimeter. To disable painting set the 'stroke-pattern' property to NULL.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_WriteOnly that allows you to set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_WriteOnly< Glib::RefPtr<Gdk::Pixbuf> > property_stroke_pixbuf() ;
#endif //#GLIBMM_PROPERTIES_ENABLED


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The color to use to paint the interior of the item. To disable painting set the 'fill-pattern' property to NULL.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_WriteOnly that allows you to set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_WriteOnly< Glib::ustring > property_fill_color() ;
#endif //#GLIBMM_PROPERTIES_ENABLED


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The color to use to paint the interior of the item, specified as a 32-bit integer value. To disable painting set the 'fill-pattern' property to NULL.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_fill_color_rgba() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The color to use to paint the interior of the item, specified as a 32-bit integer value. To disable painting set the 'fill-pattern' property to NULL.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_fill_color_rgba() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The pixbuf to use to paint the interior of the item. To disable painting set the 'fill-pattern' property to NULL.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_WriteOnly that allows you to set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_WriteOnly< Glib::RefPtr<Gdk::Pixbuf> > property_fill_pixbuf() ;
#endif //#GLIBMM_PROPERTIES_ENABLED


  //gtkmmproc error: parent : property defs lookup failed.
  //gtkmmproc error: can-focus : property defs lookup failed.
  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The sequence of path commands specifying the clip path.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_WriteOnly that allows you to set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_WriteOnly< Glib::ustring > property_clip_path() ;
#endif //#GLIBMM_PROPERTIES_ENABLED


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The fill rule used to determine which parts of the item are clipped.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Cairo::FillRule > property_clip_fill_rule() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The fill rule used to determine which parts of the item are clipped.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Cairo::FillRule > property_clip_fill_rule() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


   Bounds get_bounds() const;
    void set_bounds(const Bounds& value);
 
protected:
 

    virtual void simple_create_path_vfunc(const Cairo::RefPtr<Cairo::Context>& cr);

    virtual void simple_update_vfunc(const Cairo::RefPtr<Cairo::Context>& cr);

    virtual void simple_paint_vfunc(const Cairo::RefPtr<Cairo::Context>& cr, const Bounds& bounds);

    virtual bool simple_is_item_at_vfunc(double x, double y, const Cairo::RefPtr<Cairo::Context>& cr, bool is_pointer_event);

   bool get_need_update() const;
    void set_need_update(const bool& value);
    bool get_need_entire_subtree_update() const;
    void set_need_entire_subtree_update(const bool& value);
 

public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} //namespace Goocanvas


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Goocanvas::ItemSimple
   */
  Glib::RefPtr<Goocanvas::ItemSimple> wrap(GooCanvasItemSimple* object, bool take_copy = false);
}


#endif /* _GOOCANVASMM_ITEMSIMPLE_H */

