// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GOOCANVASMM_POINTS_H
#define _GOOCANVASMM_POINTS_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* Copyright (C) 1998-2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>
#include <goocanvaspolyline.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
extern "C" { typedef struct _GooCanvasPoints GooCanvasPoints; }
#endif

namespace Goocanvas
{

class Points
{
public:
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef Points CppObjectType;
  typedef GooCanvasPoints BaseObjectType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type() G_GNUC_CONST;

  Points();

  explicit Points(GooCanvasPoints* gobject, bool make_a_copy = true);

  Points(const Points& other);
  Points& operator=(const Points& other);

  ~Points();

  void swap(Points& other);

  ///Provides access to the underlying C instance.
  GooCanvasPoints*       gobj()       { return gobject_; }

  ///Provides access to the underlying C instance.
  const GooCanvasPoints* gobj() const { return gobject_; }

  ///Provides access to the underlying C instance. The caller is responsible for freeing it. Use when directly setting fields in structs.
  GooCanvasPoints* gobj_copy() const;

protected:
  GooCanvasPoints* gobject_;

private:

  
public:

  explicit Points(int num_points);
  Points(int num_points, const double* coords);

  //TODO: Why not use _WRAP_METHOD() or __MEMBER*?
  int get_num_points() const;
  void set_coordinate(int index, double x, double y);
  void get_coordinate(int index, double& x, double& y) const;


};

}


namespace Goocanvas
{

/** @relates Goocanvas::Points
 * @param lhs The left-hand side
 * @param rhs The right-hand side
 */
inline void swap(Points& lhs, Points& rhs)
  { lhs.swap(rhs); }

} // namespace Goocanvas

namespace Glib
{

/** A Glib::wrap() method for this object.
 * 
 * @param object The C instance.
 * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
 * @result A C++ instance that wraps this C instance.
 *
 * @relates Goocanvas::Points
 */
Goocanvas::Points wrap(GooCanvasPoints* object, bool take_copy = false);

#ifndef DOXYGEN_SHOULD_SKIP_THIS
template <>
class Value<Goocanvas::Points> : public Glib::Value_Boxed<Goocanvas::Points>
{};
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

} // namespace Glib


#endif /* _GOOCANVASMM_POINTS_H */

