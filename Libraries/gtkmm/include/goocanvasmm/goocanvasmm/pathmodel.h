// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GOOCANVASMM_PATHMODEL_H
#define _GOOCANVASMM_PATHMODEL_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* Copyright (C) 1998-2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


#include <goocanvasmm/itemmodelsimple.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GooCanvasPathModel GooCanvasPathModel;
typedef struct _GooCanvasPathModelClass GooCanvasPathModelClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Goocanvas
{ class PathModel_Class; } // namespace Goocanvas
namespace Goocanvas
{


class PathModel : public Goocanvas::ItemModelSimple
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef PathModel CppObjectType;
  typedef PathModel_Class CppClassType;
  typedef GooCanvasPathModel BaseObjectType;
  typedef GooCanvasPathModelClass BaseClassType;

private:  friend class PathModel_Class;
  static CppClassType pathmodel_class_;

private:
  // noncopyable
  PathModel(const PathModel&);
  PathModel& operator=(const PathModel&);

protected:
  explicit PathModel(const Glib::ConstructParams& construct_params);
  explicit PathModel(GooCanvasPathModel* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~PathModel();

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GooCanvasPathModel*       gobj()       { return reinterpret_cast<GooCanvasPathModel*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GooCanvasPathModel* gobj() const { return reinterpret_cast<GooCanvasPathModel*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GooCanvasPathModel* gobj_copy();

private:

protected:

  //TODO: I doubt that ustring is a sensible type for the data. murrayc.
  explicit PathModel(const Glib::ustring& data);
  

public:

  
  static Glib::RefPtr<PathModel> create(const Glib::ustring& data);


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The sequence of path commands.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy_WriteOnly that allows you to set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_WriteOnly< Glib::ustring > property_data() ;
#endif //#GLIBMM_PROPERTIES_ENABLED


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};


}


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Goocanvas::PathModel
   */
  Glib::RefPtr<Goocanvas::PathModel> wrap(GooCanvasPathModel* object, bool take_copy = false);
}


#endif /* _GOOCANVASMM_PATHMODEL_H */

