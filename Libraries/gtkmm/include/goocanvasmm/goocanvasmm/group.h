// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GOOCANVASMM_GROUP_H
#define _GOOCANVASMM_GROUP_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* Copyright (C) 1998-2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


#include <goocanvasmm/itemsimple.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GooCanvasGroup GooCanvasGroup;
typedef struct _GooCanvasGroupClass GooCanvasGroupClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Goocanvas
{ class Group_Class; } // namespace Goocanvas
namespace Goocanvas
{


class Group : public Goocanvas::ItemSimple
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef Group CppObjectType;
  typedef Group_Class CppClassType;
  typedef GooCanvasGroup BaseObjectType;
  typedef GooCanvasGroupClass BaseClassType;

private:  friend class Group_Class;
  static CppClassType group_class_;

private:
  // noncopyable
  Group(const Group&);
  Group& operator=(const Group&);

protected:
  explicit Group(const Glib::ConstructParams& construct_params);
  explicit Group(GooCanvasGroup* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~Group();

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GooCanvasGroup*       gobj()       { return reinterpret_cast<GooCanvasGroup*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GooCanvasGroup* gobj() const { return reinterpret_cast<GooCanvasGroup*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GooCanvasGroup* gobj_copy();

private:


protected:

  Group();
  

public:

  
  static Glib::RefPtr<Group> create();


  //We put these in item.hg instead.
  //See the comment there.
  //_WRAP_PROPERTY("x", double)
  //_WRAP_PROPERTY("y", double)
  //_WRAP_PROPERTY("width", double)
  //_WRAP_PROPERTY("height", double)


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};


}


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Goocanvas::Group
   */
  Glib::RefPtr<Goocanvas::Group> wrap(GooCanvasGroup* object, bool take_copy = false);
}


#endif /* _GOOCANVASMM_GROUP_H */

