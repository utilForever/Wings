// -*- c++ -*-
// Generated by gmmproc 2.46.2 -- DO NOT MODIFY!
#ifndef _GIOMM_TCPWRAPPERCONNECTION_H
#define _GIOMM_TCPWRAPPERCONNECTION_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* Copyright (C) 2015 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <giomm/tcpconnection.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GTcpWrapperConnection GTcpWrapperConnection;
typedef struct _GTcpWrapperConnectionClass GTcpWrapperConnectionClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gio
{ class TcpWrapperConnection_Class; } // namespace Gio
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gio
{

/** Wrapper for non-Gio::SocketConnection-based, Gio::Socket-based Gio::IOStreams.
 *
 * This can be used to wrap a Gio::Stream that is
 * based on a Gio::Socket, but which is not actually a
 * Gio::SocketConnection. This is used by Gio::SocketClient so that it can
 * always return a Gio::SocketConnection, even when the connection it has
 * actually created is not directly a Gio::SocketConnection.
 *
 * @newin{2,44}
 * @ingroup NetworkIO
 */

class TcpWrapperConnection : public Gio::TcpConnection
{
    
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef TcpWrapperConnection CppObjectType;
  typedef TcpWrapperConnection_Class CppClassType;
  typedef GTcpWrapperConnection BaseObjectType;
  typedef GTcpWrapperConnectionClass BaseClassType;

  // noncopyable
  TcpWrapperConnection(const TcpWrapperConnection&) = delete;
  TcpWrapperConnection& operator=(const TcpWrapperConnection&) = delete;

private:  friend class TcpWrapperConnection_Class;
  static CppClassType tcpwrapperconnection_class_;

protected:
  explicit TcpWrapperConnection(const Glib::ConstructParams& construct_params);
  explicit TcpWrapperConnection(GTcpWrapperConnection* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  TcpWrapperConnection(TcpWrapperConnection&& src) noexcept;
  TcpWrapperConnection& operator=(TcpWrapperConnection&& src) noexcept;

  virtual ~TcpWrapperConnection() noexcept;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GTcpWrapperConnection*       gobj()       { return reinterpret_cast<GTcpWrapperConnection*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GTcpWrapperConnection* gobj() const { return reinterpret_cast<GTcpWrapperConnection*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GTcpWrapperConnection* gobj_copy();

private:


public:

    explicit TcpWrapperConnection(const Glib::RefPtr<IOStream>& base_io_stream, const Glib::RefPtr<Socket>& socket);


  /** Get's @a conn's base IOStream
   * 
   * @return  @a conn's base IOStream.
   */
  Glib::RefPtr<IOStream> get_base_io_stream();
  
  /** Get's @a conn's base IOStream
   * 
   * @return  @a conn's base IOStream.
   */
  Glib::RefPtr<const IOStream> get_base_io_stream() const;

  /** The wrapped GIOStream.
   *
   * @newin{2,44}
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<IOStream> > property_base_io_stream() const;


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gio


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gio::TcpWrapperConnection
   */
  Glib::RefPtr<Gio::TcpWrapperConnection> wrap(GTcpWrapperConnection* object, bool take_copy = false);
}


#endif /* _GIOMM_TCPWRAPPERCONNECTION_H */

